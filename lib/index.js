// Generated by CoffeeScript 1.10.0
var CANVAS_CURSOR_SIZE, CANVAS_HEIGHT, CANVAS_PADDING, CANVAS_WIDTH, ColorPicker, Picker, React, SLIDER_CURSOR_HEIGHT, SLIDER_CURSOR_WIDTH, SLIDER_HEIGHT, hex2rgb, hsv2rgb, rgb2hex, rgb2hsv, shortHex2Hex, validHex,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

React = require('preact');

CANVAS_WIDTH = 300;

CANVAS_HEIGHT = 150;

CANVAS_PADDING = 10;

SLIDER_HEIGHT = 15;

CANVAS_CURSOR_SIZE = 8;

SLIDER_CURSOR_WIDTH = 6;

SLIDER_CURSOR_HEIGHT = SLIDER_HEIGHT + 6;

shortHex2Hex = function(hex) {
  var shorthand_regex;
  shorthand_regex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  return hex.replace(shorthand_regex, function(m, r, g, b) {
    return r + r + g + g + b + b;
  });
};

validHex = function(hex) {
  return typeof hex === 'string' && /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
};

rgb2hex = function(r, g, b) {
  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
};

hex2rgb = function(hex) {
  var b, g, matched, r;
  if (matched = validHex(shortHex2Hex(hex))) {
    r = parseInt(matched[1], 16);
    g = parseInt(matched[2], 16);
    b = parseInt(matched[3], 16);
  }
  return [r, g, b];
};

rgb2hsv = function(r, g, b) {
  var d, h, l, max, min, s;
  r /= 255;
  g /= 255;
  b /= 255;
  max = Math.max(r, g, b);
  min = Math.min(r, g, b);
  h = void 0;
  s = void 0;
  l = (max + min) / 2;
  if (max === min) {
    h = s = 0;
  } else {
    d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
    }
    h /= 6;
  }
  return [h, s, l];
};

hsv2rgb = function(h, s, v) {
  var b, f, g, i, p, q, r, t;
  i = Math.floor(h * 6);
  f = h * 6 - i;
  p = v * (1 - s);
  q = v * (1 - (f * s));
  t = v * (1 - ((1 - f) * s));
  switch (i % 6) {
    case 0:
      r = v;
      g = t;
      b = p;
      break;
    case 1:
      r = q;
      g = v;
      b = p;
      break;
    case 2:
      r = p;
      g = v;
      b = t;
      break;
    case 3:
      r = p;
      g = q;
      b = v;
      break;
    case 4:
      r = t;
      g = p;
      b = v;
      break;
    case 5:
      r = v;
      g = p;
      b = q;
  }
  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
};

Picker = (function(superClass) {
  extend(Picker, superClass);

  function Picker(props) {
    var hex, hsv, rgb;
    if (validHex(props.hex)) {
      hex = props.hex;
    } else {
      hex = '#888';
    }
    rgb = hex2rgb(hex);
    hsv = rgb2hsv.apply(null, rgb);
    this.state = {
      hex: hex,
      rgb: rgb,
      hsv: hsv
    };
  }

  Picker.prototype.componentDidMount = function() {
    this.renderCanvas();
    return this.renderSlider();
  };

  Picker.prototype.setCanvas = function(el) {
    var ctx;
    if (!el) {
      return;
    }
    ctx = el.getContext('2d');
    return this.canvas = {
      el: el,
      ctx: ctx
    };
  };

  Picker.prototype.setSlider = function(el) {
    var ctx;
    if (!el) {
      return;
    }
    ctx = el.getContext('2d');
    return this.slider = {
      el: el,
      ctx: ctx
    };
  };

  Picker.prototype.clickCanvas = function(e) {
    var hsv;
    hsv = this.state.hsv;
    hsv[1] = e.offsetX / CANVAS_WIDTH;
    hsv[2] = 1 - (e.offsetY / CANVAS_HEIGHT);
    return this.setState({
      hsv: hsv
    }, (function(_this) {
      return function() {
        return _this.updateColorsFrom('hsv');
      };
    })(this));
  };

  Picker.prototype.clickSlider = function(e) {
    var hsv;
    window.last_e = e;
    hsv = this.state.hsv;
    hsv[0] = e.offsetX / CANVAS_WIDTH;
    return this.setState({
      hsv: hsv
    }, (function(_this) {
      return function() {
        return _this.updateColorsFrom('hsv');
      };
    })(this));
  };

  Picker.prototype.updateColorsFrom = function(key) {
    var hex, rgb, update;
    update = {};
    if (key === 'hsv') {
      rgb = hsv2rgb.apply(null, this.state.hsv);
      hex = rgb2hex.apply(null, rgb);
      update = {
        rgb: rgb,
        hex: hex
      };
    }
    return this.setState(update, (function(_this) {
      return function() {
        _this.props.onChange(_this.state);
        return _this.renderCanvas();
      };
    })(this));
  };

  Picker.prototype.renderCanvas = function() {
    var b, g, h, j, r, ref, results, s, v, x, y;
    h = this.state.hsv[0];
    results = [];
    for (y = j = 0, ref = CANVAS_HEIGHT; 0 <= ref ? j <= ref : j >= ref; y = 0 <= ref ? ++j : --j) {
      results.push((function() {
        var k, ref1, ref2, results1;
        results1 = [];
        for (x = k = 0, ref1 = CANVAS_WIDTH; 0 <= ref1 ? k <= ref1 : k >= ref1; x = 0 <= ref1 ? ++k : --k) {
          s = x / CANVAS_WIDTH;
          v = 1 - (y / CANVAS_HEIGHT);
          ref2 = hsv2rgb(h, s, v), r = ref2[0], g = ref2[1], b = ref2[2];
          this.canvas.ctx.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
          results1.push(this.canvas.ctx.fillRect(x, y, 1, 1));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Picker.prototype.renderSlider = function() {
    var b, g, h, j, r, ref, results, s, v, x, y;
    s = 1;
    v = 1;
    results = [];
    for (y = j = 0, ref = CANVAS_HEIGHT; 0 <= ref ? j <= ref : j >= ref; y = 0 <= ref ? ++j : --j) {
      results.push((function() {
        var k, ref1, ref2, results1;
        results1 = [];
        for (x = k = 0, ref1 = CANVAS_WIDTH; 0 <= ref1 ? k <= ref1 : k >= ref1; x = 0 <= ref1 ? ++k : --k) {
          h = x / CANVAS_WIDTH;
          ref2 = hsv2rgb(h, s, v), r = ref2[0], g = ref2[1], b = ref2[2];
          this.slider.ctx.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
          results1.push(this.slider.ctx.fillRect(x, y + CANVAS_PADDING, 1, 1));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Picker.prototype.render = function() {
    var canvas_cursor_style, slider_cursor_style;
    canvas_cursor_style = {
      left: CANVAS_WIDTH * this.state.hsv[1] - CANVAS_CURSOR_SIZE / 2,
      top: CANVAS_HEIGHT * (1 - this.state.hsv[2]) - CANVAS_CURSOR_SIZE / 2,
      width: CANVAS_CURSOR_SIZE,
      height: CANVAS_CURSOR_SIZE
    };
    slider_cursor_style = {
      left: CANVAS_WIDTH * this.state.hsv[0] - SLIDER_CURSOR_WIDTH / 2,
      top: CANVAS_HEIGHT + CANVAS_PADDING - (SLIDER_CURSOR_HEIGHT - SLIDER_HEIGHT) / 2,
      width: SLIDER_CURSOR_WIDTH,
      height: SLIDER_CURSOR_HEIGHT
    };
    return React.createElement("div", {
      "className": 'picker'
    }, React.createElement("canvas", {
      "ref": this.setCanvas.bind(this),
      "width": CANVAS_WIDTH,
      "height": CANVAS_HEIGHT,
      "onClick": this.clickCanvas.bind(this)
    }), React.createElement("canvas", {
      "ref": this.setSlider.bind(this),
      "width": CANVAS_WIDTH,
      "height": SLIDER_HEIGHT + CANVAS_PADDING,
      "onClick": this.clickSlider.bind(this)
    }), React.createElement("div", {
      "className": 'canvas-cursor',
      "style": canvas_cursor_style
    }), React.createElement("div", {
      "className": 'slider-cursor',
      "style": slider_cursor_style
    }));
  };

  return Picker;

})(React.Component);

module.exports = ColorPicker = (function(superClass) {
  extend(ColorPicker, superClass);

  function ColorPicker(props) {
    this.state = {
      value: props.value,
      picking: false
    };
  }

  ColorPicker.prototype.onChangeInput = function(e) {
    var hex;
    hex = e.target.value;
    this.setState({
      value: hex
    });
    return this.props.onChange(hex);
  };

  ColorPicker.prototype.onChangeColor = function(color) {
    var hex;
    hex = color.hex;
    this.setState({
      value: hex
    });
    return this.props.onChange(hex);
  };

  ColorPicker.prototype.render = function() {
    var swatch_style;
    swatch_style = {
      backgroundColor: this.state.value
    };
    return React.createElement("div", {
      "className": 'color-picker'
    }, React.createElement(Picker, {
      "hex": this.state.value,
      "onChange": this.onChangeColor.bind(this)
    }), React.createElement("div", {
      "className": 'preview'
    }, React.createElement("div", {
      "className": 'swatch',
      "style": swatch_style
    }), React.createElement("input", {
      "type": 'text',
      "value": this.state.value,
      "onChange": this.onChangeInput.bind(this)
    })));
  };

  return ColorPicker;

})(React.Component);
